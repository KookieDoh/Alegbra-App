/* This function takes the name of the button being clicked on and changes the screen
to the given screen name after the button is clicked.
*/
function changeScreens(buttonName, screenName) {
  onEvent(buttonName, "click", function(){
    setScreen(screenName);
  });
}

/* Screen/button naming:
For buttons: B + name of button
For tutorials: T + name of tutorial
For exercises: E + name of exercise
*/

//changing screens from home screen to tutorial screens
changeScreens("BSolvingEquations", "TSolvingEquations");
changeScreens("BLinearFunc", "TLinearFunc");
changeScreens("BEvaluation", "TEvaluation");
changeScreens("BFactoring", "TFactoring");

// initializing variables to be used in the Solving Equations exercises.
var coefficientX;
var constant;
var posOrNeg;
var constant2;
var correctOption;
var correctOption2;

// Initializing functions to be used in the Solving Equations exercises.

// This function notifies the user whether the option they chose was incorrect.
function Incorrect(answerBox){
  setText(answerBox, "Incorrect, try again!");
}
/* This function notifies the user whether they option they chose was correct
and allows them to continue onto the next step. If they have completed the second
step, it allows them to try another problem.
*/
function Correct(answerBox, buttonName){
  setText(answerBox, "Correct! Good job!");
  setProperty(buttonName, "hidden", false);
}

// This function checks whether the option the user clicked is correct.
function clickOption(option, answer, answerBox, buttonName){
  onEvent(option, "click", function(){
    if(getText(option) != answer){
      Incorrect(answerBox);
    }else{
      Correct(answerBox, buttonName);
    }
});
}

//change screens from Solving Equations tutorial to Solving equations exercises.
onEvent("BStartEquations", "click", function(){
    //make sure NextStep and TryAnother buttons are hidden at the start.
    setProperty("NextStep", "hidden", true);
    setProperty("TryAnother", "hidden", true);
    
    //make sure the two answer boxes are empty at the start.
    setText("Answer", "");
    setText("Answer2", "");
    
    setScreen("ESolvingEquations");
    //Calculate values used in the equation.
    // The coefficient will be a random number between 1 and 20.
    coefficientX = Math.floor(Math.random() * (20-1+1) + 1);
    // The first constant term will be a random number between 1 and 50.
    constant = Math.floor(Math.random()*(50-1+1)+1);
    //decide whether the constant will be positive or negative.
    posOrNeg = Math.floor(Math.random()*(2-1+1) + 1);
    
    /*
    SOURCE FOR RANDOM NUMBERS:
    https://stackoverflow.com/questions/4959975/
    generate-random-number-between-two-numbers-in-javascript
    */
    
    if(posOrNeg == 1){
      constant = constant * -1;
    }
    constant2 = coefficientX * (Math.floor(Math.random()*(10-1+1)+1)) + constant;
    
    // Set the equation text using defined variables.
    if(posOrNeg == 1){
      setText("EquationText", coefficientX + "x - " + (-1*constant) + " = " + constant2);
    }else{
      setText("EquationText", coefficientX + "x + " + constant + " = " + constant2);
    }
    
    // Determine the correct option from the set of options
    if(posOrNeg == 1){
      correctOption = "Add " +(-1*constant) + " to both sides";
    }else{
      correctOption = "Subtract " + constant + " on both sides";
    }
    
    // Set the text for the four options
    setText("Option3", "Multiply by " + coefficientX + " on both sides");
    setText("Option4", "Divide by " + coefficientX + " on both sides");
    
    if(posOrNeg == 1){
      setText("Option1", "Add " + (-1 * constant) + " to both sides");
      setText("Option2", "Subtract " + (-1 * constant) + " to both sides");
    }else{
      setText("Option1", "Add " + constant + " to both sides");
      setText("Option2", "Subtract " + constant + " on both sides");
    }
    clickOption("Option1", correctOption, "Answer", "NextStep");
    clickOption("Option2", correctOption, "Answer", "NextStep");
    clickOption("Option3", correctOption, "Answer", "NextStep");
    clickOption("Option4", correctOption, "Answer", "NextStep");
    
    changeScreens("NextStep", "ESolvingEquations2");
    setText("Option5", getText("Option1"));
    setText("Option6", getText("Option2"));
    setText("Option7", getText("Option3"));
    setText("Option8", getText("Option4"));
    
    // Set the equation text using the defined variables after adding/subtracting.
    setText("EquationText2", coefficientX + "x " + " = " + (constant2 - constant));
    
    correctOption2 = "Divide by " + coefficientX + " on both sides";
    clickOption("Option5", correctOption2, "Answer2", "TryAnother");
    clickOption("Option6", correctOption2, "Answer2", "TryAnother");
    clickOption("Option7", correctOption2, "Answer2", "TryAnother");
    clickOption("Option8", correctOption2, "Answer2", "TryAnother");
    
  });

//Same code as above block, except it occurs when TryAnother button is pressed.
onEvent("TryAnother", "click", function(){
    setProperty("NextStep", "hidden", true);
    setProperty("TryAnother", "hidden", true);
    setText("Answer", "");
    setText("Answer2", "");
    setScreen("ESolvingEquations");
    coefficientX = Math.floor(Math.random() * (20-1+1) + 1);
    constant = Math.floor(Math.random()*(50-1+1)+1);
    //decide whether the constant will be positive or negative.
    posOrNeg = Math.floor(Math.random()*(2-1+1) + 1);
    if(posOrNeg == 1){
      constant = constant * -1;
    }
    constant2 = coefficientX * (Math.floor(Math.random()*(10-1+1)+1)) + constant;
    
    // Set the equation text using defined variables.
    if(posOrNeg == 1){
      setText("EquationText", coefficientX + "x - " + (-1*constant) + " = " + constant2);
    }else{
      setText("EquationText", coefficientX + "x + " + constant + " = " + constant2);
    }
    
    // Determine the correct option from the set of options
    if(posOrNeg == 1){
      correctOption = "Add " +(-1*constant) + " to both sides";
    }else{
      correctOption = "Subtract " + constant + " on both sides";
    }
    
    // Set the text for the four options
    setText("Option3", "Multiply by " + coefficientX + " on both sides");
    setText("Option4", "Divide by " + coefficientX + " on both sides");
    
    if(posOrNeg == 1){
      setText("Option1", "Add " + (-1 * constant) + " to both sides");
      setText("Option2", "Subtract " + (-1 * constant) + " to both sides");
    }else{
      setText("Option1", "Add " + constant + " to both sides");
      setText("Option2", "Subtract " + constant + " on both sides");
    }
    clickOption("Option1", correctOption, "Answer", "NextStep");
    clickOption("Option2", correctOption, "Answer", "NextStep");
    clickOption("Option3", correctOption, "Answer", "NextStep");
    clickOption("Option4", correctOption, "Answer", "NextStep");
    
    changeScreens("NextStep", "ESolvingEquations2");
    setText("Option5", getText("Option1"));
    setText("Option6", getText("Option2"));
    setText("Option7", getText("Option3"));
    setText("Option8", getText("Option4"));
    
    // Set the equation text using the defined variables after adding/subtracting.
    setText("EquationText2", coefficientX + "x " + " = " + (constant2 - constant));
    
    correctOption2 = "Divide by " + coefficientX + " on both sides";
    clickOption("Option5", correctOption2, "Answer2", "TryAnother");
    clickOption("Option6", correctOption2, "Answer2", "TryAnother");
    clickOption("Option7", correctOption2, "Answer2", "TryAnother");
    clickOption("Option8", correctOption2, "Answer2", "TryAnother");
    
  });

//initializing variables to be used in Linear Functions exercises.
var slope;
var intercept;
var decimalOrWhole;

//change screens from Linear Functions tutorial to the exercises.
onEvent("BStartFunc", "click", function( ) {
  //make sure the checkmarks are hidden at the start.
  setProperty("checkmark1", "hidden", true);
  setProperty("checkmark2", "hidden", true);
  setProperty("checkmark3", "hidden", true);
  
  //make sure the xmarks are hidden at the start.
  setProperty("xmark1", "hidden", true);
  setProperty("xmark2", "hidden", true);
  setProperty("xmark3", "hidden", true);

  //make sure the answer box is empty at the start.
  setText("AnswerLF", "");
  
  //make sure the submit answers box is visible at the start.
  setProperty("BSubmitAnswers", "hidden", false);
  
  //make sure the dropdown boxes are on the first option.
  setProperty("dropdown1", "index", 0);
  setProperty("dropdown2", "index", 0);
  setProperty("dropdown3", "index", 0);
    
  setScreen("ELinearFunc");
  //decide whether the slope will be a decimal or whole number.
  decimalOrWhole = Math.floor(Math.random()*(2-1+1) + 1);
  if (decimalOrWhole == 1) { //if the slope is a decimal.
    slope = (Math.floor(Math.random() * (9-1+1) + 1))/10; // random num between 0.1 and 0.9.
  }else{ // if the slope is a whole number
    slope = Math.floor(Math.random()*(50-1+1)+1); //random num between 1 and 50.
  }
  
  // decide whether the slope will be positive or negative.
  posOrNeg = Math.floor(Math.random()*(2-1+1) + 1);
  if(posOrNeg == 1){
    slope = slope * -1;
  }
  
  // calculate the y-intercept.
  intercept = Math.floor(Math.random()*(100-1+1)+1); //random num between 1 and 100.
  
  // decide whether the y-intercept will be positive or negative.
  posOrNeg = Math.floor(Math.random()*(2-1+1) + 1);
  if(posOrNeg == 1){
    intercept = intercept * -1;
  }
  
  // set the text for the equation using the defined variables.
  if(intercept<0){
    setText("EquationTextLF", "y = " + slope + "x - " + (intercept *-1));
  }else{
    setText("EquationTextLF", "y = " + slope + "x + " + intercept);
  }
  
  // set the text for the dropdown options.
  setProperty("dropdown1", "options", [intercept * -1, intercept, slope, slope * -1]);
  setProperty("dropdown2", "options", [intercept * -1, intercept, slope, slope * -1]);
  
  // check whether the submitted answers are correct.
  onEvent("BSubmitAnswers", "click", function( ) {
    // when the answers are correct, make green check marks appear.
    if(getText("dropdown1") == intercept){
      setProperty("xmark1", "hidden", true);
      setProperty("checkmark1", "hidden", false);
    }
    // when the answers are incorrect, make red x marks appear.
    else{
      setProperty("checkmark1", "hidden", true);
      setProperty("xmark1", "hidden", false);
    }
    if(getText("dropdown2") == slope){
      setProperty("xmark2", "hidden", true);
      setProperty("checkmark2", "hidden", false);
    }else{
      setProperty("checkmark2", "hidden", true);
      setProperty("xmark2", "hidden", false);
    }
    if(slope>0){ // if slope is positive graph should lead upward
      if(getText("dropdown3") == "upward"){
        setProperty("xmark3", "hidden", true);
        setProperty("checkmark3", "hidden", false);
      }else{
        setProperty("checkmark3", "hidden", true);
        setProperty("xmark3", "hidden", false);
      }
    }else{ // if slope is negative graph should lead downward
      if(getText("dropdown3") == "downward"){
        setProperty("xmark3", "hidden", true);
        setProperty("checkmark3", "hidden", false);
      }else{
        setProperty("checkmark3", "hidden", true);
        setProperty("xmark3", "hidden", false);
      }
    }
    // When all the answers are correct, allow the user to continue.
    if(getProperty("checkmark1", "hidden") == false && 
      getProperty("checkmark2", "hidden") == false &&
      getProperty("checkmark3", "hidden") == false){
        Correct("AnswerLF", "TryAnotherLF");
        setProperty("BSubmitAnswers", "hidden", true);
      }else{
        Incorrect("AnswerLF");
      }
  });
});

//same code block as above, except it occurs when TryAnotherLF button is pressed.
onEvent("TryAnotherLF", "click", function( ) {
  //make sure the checkmarks are hidden at the start.
  setProperty("checkmark1", "hidden", true);
  setProperty("checkmark2", "hidden", true);
  setProperty("checkmark3", "hidden", true);
  
  //make sure the xmarks are hidden at the start.
  setProperty("xmark1", "hidden", true);
  setProperty("xmark2", "hidden", true);
  setProperty("xmark3", "hidden", true);

  //make sure the answer box is empty at the start.
  setText("AnswerLF", "");
  
  //make sure the submit answers box is visible at the start.
  setProperty("BSubmitAnswers", "hidden", false);
  
  //make sure the dropdown boxes are on the first option.
  setProperty("dropdown1", "index", 0);
  setProperty("dropdown2", "index", 0);
  setProperty("dropdown3", "index", 0);
  
  setScreen("ELinearFunc");
  //decide whether the slope will be a decimal or whole number.
  decimalOrWhole = Math.floor(Math.random()*(2-1+1) + 1);
  if (decimalOrWhole == 1) { //if the slope is a decimal.
    slope = (Math.floor(Math.random() * (9-1+1) + 1))/10; // random num between 0.1 and 0.9.
  }else{ // if the slope is a whole number
    slope = Math.floor(Math.random()*(50-1+1)+1); //random num between 1 and 50.
  }
  
  // decide whether the slope will be positive or negative.
  posOrNeg = Math.floor(Math.random()*(2-1+1) + 1);
  if(posOrNeg == 1){
    slope = slope * -1;
  }
  
  // calculate the y-intercept.
  intercept = Math.floor(Math.random()*(100-1+1)+1); //random num between 1 and 100.
  
  // decide whether the y-intercept will be positive or negative.
  posOrNeg = Math.floor(Math.random()*(2-1+1) + 1);
  if(posOrNeg == 1){
    intercept = intercept * -1;
  }
  
  // set the text for the equation using the defined variables.
  if(intercept<0){
    setText("EquationTextLF", "y = " + slope + "x - " + (intercept *-1));
  }else{
    setText("EquationTextLF", "y = " + slope + "x + " + intercept);
  }
  
  // set the text for the dropdown options.
  setProperty("dropdown1", "options", [intercept * -1, intercept, slope, slope * -1]);
  setProperty("dropdown2", "options", [intercept * -1, intercept, slope, slope * -1]);
  
  // check whether the submitted answers are correct.
  onEvent("BSubmitAnswers", "click", function( ) {
    // when the answers are correct, make green check marks appear.
    if(getText("dropdown1") == intercept){
      setProperty("xmark1", "hidden", true);
      setProperty("checkmark1", "hidden", false);
    }
    // when the answers are incorrect, make red x marks appear.
    else{
      setProperty("checkmark1", "hidden", true);
      setProperty("xmark1", "hidden", false);
    }
    if(getText("dropdown2") == slope){
      setProperty("xmark2", "hidden", true);
      setProperty("checkmark2", "hidden", false);
    }else{
      setProperty("checkmark2", "hidden", true);
      setProperty("xmark2", "hidden", false);
    }
    if(slope>0){ // if slope is positive graph should lead upward
      if(getText("dropdown3") == "upward"){
        setProperty("xmark3", "hidden", true);
        setProperty("checkmark3", "hidden", false);
      }else{
        setProperty("checkmark3", "hidden", true);
        setProperty("xmark3", "hidden", false);
      }
    }else{ // if slope is negative graph should lead downward
      if(getText("dropdown3") == "downward"){
        setProperty("xmark3", "hidden", true);
        setProperty("checkmark3", "hidden", false);
      }else{
        setProperty("checkmark3", "hidden", true);
        setProperty("xmark3", "hidden", false);
      }
    }
    // When all the answers are correct, allow the user to continue.
    if(getProperty("checkmark1", "hidden") == false && 
      getProperty("checkmark2", "hidden") == false &&
      getProperty("checkmark3", "hidden") == false){
        Correct("AnswerLF", "TryAnotherLF");
        setProperty("BSubmitAnswers", "hidden", true);
      }else{
        Incorrect("AnswerLF");
      }
  });
});

//Initializing variables to be used in f(x) exercises
var b;
var c;
var x;
var correctY;

// Change screens from evaluating f(x) tutorial to exercises.
onEvent("BStartEvaluation", "click", function( ) {

  //make sure that Scrap Work is empty at the start.
  setText("ScrapWork", "Scrap Work:");
  
  //make sure that the SubmitAnswer button is visible at the start.
  setProperty("BSubmitAnswerEE", "hidden", false);

  //make sure the Try Another button is hidden at the start.
  setProperty("TryAnotherEE", "hidden", true);
  
  //make sure the Input and Answer boxes are empty at the start.
  setText("AnswerEE", "");
  setText("Input", "");
  
  setScreen("EEvaluation");
  // Calculate b and c
  b = Math.floor(Math.random()*(20-1+1)+1); //random num between 1 and 20.
  c = Math.floor(Math.random()*(50-1+1)+1); //random num between 1 and 50.
  
  // Decide whether b will be positive or negative
  posOrNeg = Math.floor(Math.random()*(2-1+1) + 1);
  if(posOrNeg == 1){
    b = b * -1;
  }
  
  // Decide whether c will be positive or negative
  posOrNeg = Math.floor(Math.random()*(2-1+1) + 1);
  if(posOrNeg == 1){
    c = c * -1;
  }
  
  // Set the equation text using the defined variables
  if(b<0 && c>0){
    setText("EquationTextEE", "f(x) = x² - " + (b*-1) + "x + " + c);
  }else if(b<0 && c<0){
    setText("EquationTextEE", "f(x) = x² - " + (b*-1) + "x - " + (c*-1));
  }else if(b>0 && c>0){
    setText("EquationTextEE", "f(x) = x² + " + b + "x + " + c);
  }else{//if b is positive and c is negative.
    setText("EquationTextEE", "f(x) = x² + " + b + "x - " + (c*-1));
  }
  
  //calculate the x value that will be used
  x = Math.floor(Math.random()*(10-1+1)+1); //random num between 1 and 10.
  
  //decide whether the x value will be positive or negative.
  posOrNeg = Math.floor(Math.random()*(2-1+1) + 1);
  if(posOrNeg == 1){
    x = x * -1;
  }
  
  // set the text for the labels.
  setText("Instructions", "Find f( " + x + " )");
  setText("Label", "f( " + x + " ) is");
  
  //calculate the correct answer
  correctY = Math.pow(x, 2) + (b*x) + c;
  
  //determine whether the user entered the correct answer
  onEvent("BSubmitAnswerEE", "click", function( ) {
    if(getText("Input") == correctY){
      Correct("AnswerEE", "TryAnotherEE");
      setProperty("BSubmitAnswerEE", "hidden", true);
    }else{
      Incorrect("AnswerEE");
    }
  });
  
});

//same code block as above, except it occurs when the Try Another Button is pressed.
onEvent("TryAnotherEE", "click", function( ) {

  //make sure that Scrap Work is empty at the start.
  setText("ScrapWork", "Scrap Work:");
  
  //make sure that the SubmitAnswer button is visible at the start.
  setProperty("BSubmitAnswerEE", "hidden", false);

  //make sure the Try Another button is hidden at the start.
  setProperty("TryAnotherEE", "hidden", true);
  
  //make sure the Input and Answer boxes are empty at the start.
  setText("AnswerEE", "");
  setText("Input", "");
  
  setScreen("EEvaluation");
  // Calculate b and c
  b = Math.floor(Math.random()*(20-1+1)+1); //random num between 1 and 20.
  c = Math.floor(Math.random()*(50-1+1)+1); //random num between 1 and 50.
  
  // Decide whether b will be positive or negative
  posOrNeg = Math.floor(Math.random()*(2-1+1) + 1);
  if(posOrNeg == 1){
    b = b * -1;
  }
  
  // Decide whether c will be positive or negative
  posOrNeg = Math.floor(Math.random()*(2-1+1) + 1);
  if(posOrNeg == 1){
    c = c * -1;
  }
  
  // Set the equation text using the defined variables
  if(b<0 && c>0){
    setText("EquationTextEE", "f(x) = x² - " + (b*-1) + "x + " + c);
  }else if(b<0 && c<0){
    setText("EquationTextEE", "f(x) = x² - " + (b*-1) + "x - " + (c*-1));
  }else if(b>0 && c>0){
    setText("EquationTextEE", "f(x) = x² + " + b + "x + " + c);
  }else{//if b is positive and c is negative.
    setText("EquationTextEE", "f(x) = x² + " + b + "x - " + (c*-1));
  }
  
  //calculate the x value that will be used
  x = Math.floor(Math.random()*(10-1+1)+1); //random num between 1 and 10.
  
  //decide whether the x value will be positive or negative.
  posOrNeg = Math.floor(Math.random()*(2-1+1) + 1);
  if(posOrNeg == 1){
    x = x * -1;
  }
  
  // set the text for the labels.
  setText("Instructions", "Find f( " + x + " )");
  setText("Label", "f( " + x + " ) is");
  
  //calculate the correct answer
  correctY = Math.pow(x, 2) + (b*x) + c;
  
  //determine whether the user entered the correct answer
  onEvent("BSubmitAnswerEE", "click", function( ) {
    if(getText("Input") == correctY){
      Correct("AnswerEE", "TryAnotherEE");
      setProperty("BSubmitAnswerEE", "hidden", true);
    }else{
      Incorrect("AnswerEE");
    }
  });
  
});

var n;
var k;

//changing screens from the factoring tutorial to the factoring exercises.
onEvent("BStartFactoring", "click", function( ) {
  //Make sure Scrap Work is empty at the start.
  setText("ScrapWorkF", "Scrap Work:");
  
  //Make sure the input and answer boxes are empty at the start.
  setText("Input1", "");
  setText("Input2", "");
  setText("AnswerF", "");
  
  //Make sure the TryAnother button is hidden at the start.
  setProperty("TryAnotherF", "hidden", true);
  
  //Make sure that the submit answer button is visible at the start.
  setProperty("BSubmitAnswerF", "hidden", false);
  
  setScreen("EFactoring");
  
  //calculate n and k
  n = Math.floor(Math.random()*(9-1+1)+1); //random num between 1 and 9.
  k = Math.floor(Math.random()*(9-1+1)+1); //random num between 1 and 9.
  
  // determine whether n will be positive or negative.
  posOrNeg = Math.floor(Math.random()*(2-1+1) + 1);
  if(posOrNeg == 1){
    n = n * -1;
  }
  
  //determine whether k will be positive or negative.
  posOrNeg = Math.floor(Math.random()*(2-1+1) + 1);
  if(posOrNeg == 1){
    k = k * -1;
  }
  
  // calculate the b and c terms in the quadratic equation.
  b = n + k;
  c = n * k;


  // Set the equation text using the defined variables
  if(b<0 && c>0){
    setText("EquationTextF", "x² - " + (b*-1) + "x + " + c);
  }else if(b<0 && c<0){
    setText("EquationTextF", "x² - " + (b*-1) + "x - " + (c*-1));
  }else if(b>0 && c>0){
    setText("EquationTextF", "x² + " + b + "x + " + c);
  }else{//if b is positive and c is negative.
    setText("EquationTextF", "x² + " + b + "x - " + (c*-1));
  }
  
  //determine whether the user entered the correct answer
  onEvent("BSubmitAnswerF", "click", function( ) {
    if((getText("Input1") == n || getText("Input1") == k) &&
      (getText("Input2") == n || getText("Input2") == k)){
        Correct("AnswerF", "TryAnotherF");
        setProperty("BSubmitAnswerF", "hidden", true);
      }else{
        Incorrect("AnswerF");
      }
  });
  
  
});

//changing screens from the factoring tutorial to the factoring exercises.
onEvent("TryAnotherF", "click", function( ) {
  //Make sure Scrap Work is empty at the start.
  setText("ScrapWorkF", "Scrap Work:");
  
  //Make sure the input and answer boxes are empty at the start.
  setText("Input1", "");
  setText("Input2", "");
  setText("AnswerF", "");
  
  //Make sure the TryAnother button is hidden at the start.
  setProperty("TryAnotherF", "hidden", true);
  
  //Make sure that the submit answer button is visible at the start.
  setProperty("BSubmitAnswerF", "hidden", false);
  
  setScreen("EFactoring");
  
  //calculate n and k
  n = Math.floor(Math.random()*(9-1+1)+1); //random num between 1 and 9.
  k = Math.floor(Math.random()*(9-1+1)+1); //random num between 1 and 9.
  
  // determine whether n will be positive or negative.
  posOrNeg = Math.floor(Math.random()*(2-1+1) + 1);
  if(posOrNeg == 1){
    n = n * -1;
  }
  
  //determine whether k will be positive or negative.
  posOrNeg = Math.floor(Math.random()*(2-1+1) + 1);
  if(posOrNeg == 1){
    k = k * -1;
  }
  
  // calculate the b and c terms in the quadratic equation.
  b = n + k;
  c = n * k;


  // Set the equation text using the defined variables
  if(b<0 && c>0){
    setText("EquationTextF", "x² - " + (b*-1) + "x + " + c);
  }else if(b<0 && c<0){
    setText("EquationTextF", "x² - " + (b*-1) + "x - " + (c*-1));
  }else if(b>0 && c>0){
    setText("EquationTextF", "x² + " + b + "x + " + c);
  }else{//if b is positive and c is negative.
    setText("EquationTextF", "x² + " + b + "x - " + (c*-1));
  }
  
  //determine whether the user entered the correct answer
  onEvent("BSubmitAnswerF", "click", function( ) {
    if((getText("Input1") == n || getText("Input1") == k) &&
      (getText("Input2") == n || getText("Input2") == k)){
        Correct("AnswerF", "TryAnotherF");
        setProperty("BSubmitAnswerF", "hidden", true);
      }else{
        Incorrect("AnswerF");
      }
  });
});

/* This function will bring the user to the home screen
every time they click on one of the home buttons.
*/
function goToHomeScreen(homeButtonName) {
  onEvent(homeButtonName, "click", function( ) {
    setScreen("HomeScreen");
  });
}
